1. Prerequisites.

    1.1. $ rm -rf ~/.m2/repository/com/variant/*
    1.1. Core mvn clean install must run clean
    1.2. Server sbt clean test must run clean
    1.3. Client mvn clean install must run clean

2. Release

    2.1. Build the latest server-extapi-demo-<release>.jar
         • EXTAPI project must be on the branch release/<release>
         • run SERVER/release.sh
           this will make variant-core-<release>.jar and server-extapi-<release>.jar
           and copy them to variant-server-extapi/lib as dependencies for ExtAPI.
         • cd pub/VARIANT-SERVER-EXTAPI
         • rm old dependencies from lib/, if any.
         • Build the project:
           $ bin/release.sh
           This produces target/server-extapi-demo-<release>.jar and copies it to
           ../../variant/SERVER/distr/ext
         • remove old extapi jar from SERVER/distr/ext/, if any.

    2.2. Confirm the latest variant-extapi-demo-<release>.jar made it to the SERVER project and 
         that it does not brake the server.
         • cd variant/SERVER
         • sbt clean test
         
    2.3. Build release artifacts
         • cd variant/RELEASE
         • bin/release.sh
           This generates in RELEASE/target: 
           variant-<release>.js                 - JavaScript Client
           variant-java-<release>.zip           - Java Client
           variant-server-<release>.zip         - Server
           variant-server-extapi-<release>.zip  - Server EXTAPI

3. Servlet Adapter

    3.1. Create new release branch in variant-java-servlet-adapter
    3.2. Update version in pom.xml and make code changes
    3.3. The latest core and java client jars should have been copied in the /lib directory by step 2.3 above 
    3.4. Delete old jars from lib/.
    3.5. 'mvn clean install'.  (This requires a running server with schemata from test/resources/schemata/*
    3.6. copy /target/variant-java-client-servlet-adapter-<release>.jar to lib/.
    3.7. Build javadoc by running bin/javadoc.sh. Will install it in /docs, which is where github pages will look for it.
    3.8. Commit and merge back to main.

4. Demo Application
    4.1. Checkout variant-pub/VARIANT-JAVA-DEMO
    4.2. Update dependency versions in pom.xml.
    4.3. Make code changes if needed.
    4.4. copy the all files from servlet-adapter/lib to lib/.
    4.5. Deploy server in /tmp
    4.6. $ mvn tomcat7:run
    4.7. Manually check-out demo.
    4.8. Commit back to main.
    
5. Javadoc

    5.1. Generate javadoc by running bin/javadoc.sh
         this will create the javadoc files in javadoc.
         
    5.2. Over an ssh client, create new directory javadoc/<release>
         and copy there the content of the RELEASE/javadoc directory.
    
6. Website.

    6.1. Copy current live site to staging.
    6.2. Update all javadoc links to the new release.
    6.3. Ensure no dead links with http://www.brokenlinkcheck.com
         (there are currently two dead links to old typesave Config repo in 0.7.x javadoc,
          which we won't fix.)
              
