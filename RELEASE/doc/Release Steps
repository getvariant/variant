1. Prerequisites.

    1.1. $ rm -rf ~/.m2/repository/com/variant/*
    1.1. Core mvn clean install must run clean
    1.2. Server sbt clean test must run clean
    1.3. Client mvn clean install must run clean

2. Release

    2.1. Build the latest server-extapi-demo-<release>.jar
         • EXTAPI project must be on the branch release/<release>
         • run RELEASE/bin/release.sh
           this will make variant-core-<release>.jar and server-extapi-demo-<release>.jar
           and copy them to variant-server-extapi/lib as dependencies for ExtAPI.
   *** improvement: have release.sh also copy core and java client jars to variant-pub/variant-java-servlet-adapter/lib ***
         • cd variant-pub/VARIANT-SERVER-EXTAPI
         • Follow instruction in pom.xml for installing the extapi jar into local maven repository. 
           May need to do the same for the core jar, if not already in local repo.
         • rm old dependencies from lib/
         • Build the project:
           $ mvn clean package
           This produces target/server-extapi-demo-<release>.jar: 
         • $ cp target/variant-extapi-sample-<release>.jar ../../variant/SERVER/distr/ext
         • remove old extapi jar from SERVER/distr/ext/

    2.2. Confirm the latest variant-extapi-demo-<release>.jar made it to the SERVER project and 
         that it does not brake the server.
         • cd variant/SERVER
         • sbt clean test
         
    2.3. Build release artifacts
         • cd variant/RELEASE
         • bin/release.sh
           This generates in RELEASE/target: 
           variant-<release>.js          - JavaScript Client
           variant-java-<release>.zip    - Java Client
           variant-server-<release>.zip  - Server

3. Servlet Adapter

    3.1. Create new release branch in variant-java-servlet-adapter
    3.2. Update version in pom.xml and make code changes
    3.3. Test/Build and copy /target/variant-java-client-servlet-adapter-<release>.jar to /lib.
    3.4. Copy latest variant-core.jar and variant-java-client.jar to /lib
    3.5. Build javadoc by running bin/javadoc.sh. Will install it in /docs, which is where github pages will look for it.
    3.6. Commit and merge back to main.

4. Demo Application
    4.1. Checkout variant-pub/VARIANT-JAVA-DEMO
    4.2. Update dependency versions in pom.xml.
    4.3. Make code changes if needed.
    4.4. Deploy server in /tmp
    4.5. $ mvn tomcat7:run
    4.6. Manually check-out demo.
    4.7. Commit back to main.
    
5. Javadoc

    5.1. Generate javadoc by running bin/javadoc.sh
         this will create the javadoc files in javadoc.
         
    5.2. Over an ssh client, create new directory javadoc/<release>
         and copy there the content of the RELEASE/javadoc directory.
    
6. Website.

    6.1. Copy current live site to staging.
    6.2. Update all javadoc links to the new release.
    6.3. Ensure no dead links with http://www.brokenlinkcheck.com
         (there are currently two dead links to old typesave Config repo in 0.7.x javadoc,
          which we won't fix.)
              
