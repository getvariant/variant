package com.variant.core.schema.parser;

import java.util.List;

import com.variant.core.UserError.Severity;
import com.variant.core.schema.ParserMessage;
import com.variant.core.schema.Schema;

/**
 * Represents the outcome of the XDM schema parsing operation.
 * Returned by {@link com.variant.core.Variant#parseSchema(java.io.InputStream, boolean)}.
 * Host code can obtain information about the outcome of the parsing operation.
 * 
 * @author Igor Urisman
 * @since 0.5
 */
public interface ParserResponse {
	
	/**
	 * List of all parse messages in order they were emitted.
	 * @return A list of objects of type {@link ParserMessage}.
	 * @since 0.5
	 */
	List<ParserMessage> getMessages();

	/**
	 * Equivalent to <code>!{@link #getMessages()}.isEmpty()</code>.
	 * @return True there are messages of any severity, or false otherwise.
	 * @since 0.5
	 */
	boolean hasMessages();

	/**
	 * List of all parse messages of given severity or higher, in order they were emitted.
	 * @return A list of objects of type {@link ParserMessage}.
	 * @since 0.5
	 */
	List<ParserMessage> getMessages(Severity severity);

	/**
	 * Equivalent to <code>!{@link #getMessages(severity)}.isEmpty()</code>.
	 * @return True there are messages of given severity or higher, false otherwise.
	 * @since 0.5
	 */
	boolean hasMessages(Severity severity);
	
	/**
	 * Parsed schema.
	 * @return {@link Schema} object if no ERROR or FATAL severity message were generated by the parser, or null otherwise.
	 * @since 0.7
	 */
	Schema getSchema();
	
	/**
	 * Source schema.
	 * @return String containing the schema definition, if no ERROR or FATAL severity message were generated by the parser, or null otherwise.
	 * @since 0.7
	 */	
	String getSchemaSrc();
}
