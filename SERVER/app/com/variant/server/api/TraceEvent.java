package com.variant.server.api;

import java.util.Map;


/**
 * <p>A Variant trace event, that can be triggered either explicitly or is created and triggered implicitly by Variant Server.
 * Explicit trace events are triggered by {@link Session#triggerTraceEvent(com.variant.core.TraceEvent)}. Implicit trace events
 * Variant trace events are generated by user sessions as they traverse Variant variations. Variant server with the purpose of subsequent
 * are created by Variant Server within the scope of {@link Session#targetForState(com.variant.core.schema.State)} and triggered 
 * by {@link StateRequest#commit(Object...)} or {@link StateRequest#fail(Object...)}. In either case, the client code can attach 
 * String attributes to these events, to aid in the downstream analysis.
 * 
 * <p>Trace events are processed by Variant Server, outside of the client code, where they are automatically enriched with pertinent
 * variation related information, such as the current state and the list of live experiences the session is traversing in the
 * current state.
 *
 * 
 * @since 0.10
 */
public interface TraceEvent {

	/**
	 * The name of the event.
	 *
	 * @since 0.10
	 */
	String getName();
		
	/**
	 * Get the map of event attributes.
	 * 
	 * @param name Attribute name.
	 * @return A map of currently set events.
	 * 
	 * @since 0.10
	 */
	Map<String,String> getAttributes();
	
}
